name: Build & Publish taskserver (GHCR)

on:
  push:
    branches: [ main ]
    paths:
      - 'taskserver/**'
      - 'src/server/**'
      - 'packages/shared/**'
      - 'Dockerfile'
      - 'taskserver/Dockerfile'
      - '.github/workflows/taskserver-deploy.yml'
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write
  id-token: write   # (safe to keep; needed if you enable signing later)

concurrency:
  group: taskserver-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  # Final image: ghcr.io/sophluent-systems/playdayai/taskserver:<tag>
  IMAGE_NAME: sophluent-systems/playdayai/taskserver

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch       # e.g. :main
            type=sha                    # e.g. :sha-abc1234
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .                      # repo root (per your answers)
          file: taskserver/Dockerfile
          platforms: linux/amd64          # amd64 only
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Optional hardening: uncomment when ready ---
      # - name: Trivy scan (vuln report, non-failing initially)
      #   uses: aquasecurity/trivy-action@0.24.0
      #   with:
      #     image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      #     vuln-type: 'os,library'
      #     format: 'table'
      #     exit-code: '0'  # flip to '1' once you're comfortable failing on criticals
      #
      # - name: Install Cosign (for image signing)
      #   uses: sigstore/cosign-installer@v3.6.0
      #
      # - name: Sign image (keyless)
      #   run: cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
