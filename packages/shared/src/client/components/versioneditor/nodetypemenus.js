import { Constants } from '@src/common/defaultconfig';
import { ifThenElseMetadata } from '@src/common/nodeMetadata';

const FALLBACK_TRAINING_KEY = 'tinker';
const FALLBACK_TRAINING_URL = 'https://api.tinker.ai/v1/jobs';

const trainingEndpoints = Constants?.endpoints?.training ?? {};
const trainingEndpointKeys = Object.keys(trainingEndpoints);
const defaultTrainingKey = trainingEndpointKeys.includes(FALLBACK_TRAINING_KEY)
  ? FALLBACK_TRAINING_KEY
  : trainingEndpointKeys[0] ?? FALLBACK_TRAINING_KEY;
const trainingEndpointOptions = trainingEndpointKeys.map((key) => ({
  label: trainingEndpoints[key]?.label ?? key,
  value: key,
}));
const defaultTrainingSubmitUrl =
  trainingEndpoints[defaultTrainingKey]?.defaultUrl ?? FALLBACK_TRAINING_URL;
const defaultTrainingStatusUrl =
  trainingEndpoints[defaultTrainingKey]?.statusUrl ?? FALLBACK_TRAINING_URL;

export const nodeTypeMenus = {
  start: [{
    /*  SUBSECTION */
    label: "Start",
    type: "fieldlist",
    fields: [
      {
        label: "Text (Optional, shown at the start)",
        type: "text",
        path: "params.text",
        maxChar: 2048,
        multiline: true,
        lines: 4,
        defaultValue: "Welcome!",
      },
    ],
  }],
  staticText: [{
    /*  SUBSECTION */
    label: "Static Text",
    type: "fieldlist",
    fields: [
      {
        label: "Name (name referenced in input and ouput dropdowns)",
        type: "text",
        path: "instanceName",
        tooltip: "A unique name for your reference.",
        maxChar: 30,
        multiline: false,
        defaultValue: "mainUserInput",
      },
      {
        label: "Text",
        type: "text",
        path: "params.text",
        maxChar: 16000,
        multiline: true,
        lines: 8,
        defaultValue: "This is some text.",
      },
    ],
  }],
  delay: [{
    /*  SUBSECTION */
    label: "Delay",
    type: "fieldlist",
    fields: [
      {
        label: "Name (name referenced in input and ouput dropdowns)",
        type: "text",
        path: "instanceName",
        tooltip: "A unique name for your reference.",
        maxChar: 30,
        multiline: false,
        defaultValue: "mainUserInput",
      },
      {
        label: "Delay (Seconds)",
        type: "float",
        path: "params.delay",
        range: [0.25, 10000.0],
        tooltip: "Delay time in seconds.",
        defaultValue: 1,
      },
    ],
  }],
  randomNumber: [{
    /*  SUBSECTION */
    label: "Random Number",
    type: "fieldlist",
    fields: [
      {
        label: "Name (name referenced in input and ouput dropdowns)",
        type: "text",
        path: "instanceName",
        tooltip: "A unique name for your reference.",
        maxChar: 30,
        multiline: false,
        defaultValue: "mainUserInput",
      },
      {
        label: "Low (inclusive)",
        type: "float",
        path: "params.low",
        range: [0, 1000000000],
        tooltip: "Low end of the random number range.",
        defaultValue: 0,
      },
      {
        label: "High (exclusive)",
        type: "float",
        path: "params.high",
        range: [0, 1000000000],
        tooltip: "High end of the random number range.",
        defaultValue: 1,
      },
      {
        label: "Number Type",
        type: "dropdown",
        path: "params.numberType",
        tooltip: "Type of number to generate.",
        options: ["integer", "float"].map((option) => {return {label: option, value: option}}),
        defaultValue: "integer",
      },
    ],
  }],
    externalTextInput: [{
      /*  SUBSECTION */
      label: "User Input Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "mainUserInput",
        },
        {
          label: "User Token Limit",
          type: "decimal",
          path: "params.tokenLimit",
          range: [10, 10000],
          tooltip: "The maximum number of tokens that can be typed by the user in a single turn.",
          defaultValue: 100,
        },
      ],
    }],
    externalMultiInput: [{
      /*  SUBSECTION */
      label: "Multimedia Input",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "User input",
        },
        {
          label: "Supported input modes",
          path: "params.supportedModes",
          type: "multiselect",
          tooltip: "Choose which kinds of input this node accepts from the player.",
          defaultValue: ["text", "stt", "audio"],
          options: [
            { label: "Text entry", value: "text" },
            { label: "Speech to text", value: "stt" },
            { label: "Audio clip", value: "audio" },
          ],
        },
        {
          label: "Allowed attachments",
          path: "params.supportedTypes",
          type: "multiselect",
          tooltip: "Additional media types that can be uploaded alongside the primary input mode.",
          defaultValue: ["text", "audio"],
          options: ["text", "audio", "image", "video"].map((option) => {return {label: option, value: option}}),
        },
        {
          label: "Text Token Limit",
          type: "decimal",
          path: "params.tokenLimit",
          range: [10, 10000],
          tooltip: "The maximum number of tokens that can be typed by the user in a single turn.",
          defaultValue: 100,
        },
        {
          label: "Automatically send speech when the user stops talking",
          path: "params.conversational",
          type: "checkbox",
          defaultValue: true,
          tooltip: "If selected, the audio will be sent automatically after the user stops talking.",
        },
        {
          label: "Enable speech-to-text conversion",
          path: "params.stt.enabled",
          type: "checkbox",
          defaultValue: true,
          tooltip: "Turn on automatic speech-to-text transcription when the user records audio.",
        },
        {
          label: "Speech-to-text server URL",
          path: "params.stt.serverUrl",
          type: "text",
          maxChar: 2048,
          multiline: false,
          defaultValue: "https://api.openai.com/v1/audio/transcriptions",
          tooltip: "Endpoint that will receive the recorded audio and return transcribed text.",
        },
        {
          label: "Speech-to-text model",
          path: "params.stt.model",
          type: "text",
          maxChar: 128,
          multiline: false,
          defaultValue: "gpt-4o-transcribe",
          tooltip: "Model name to request when performing speech-to-text.",
        },
        {
          label: "Use the account's speech-to-text key",
          path: "params.stt.useAccountKey",
          type: "checkbox",
          defaultValue: true,
          tooltip: "If enabled, the player's saved service key is used. Disable to supply a custom key below.",
        },
        {
          label: "Account key preference name",
          path: "params.stt.accountKeyName",
          type: "text",
          maxChar: 128,
          multiline: false,
          defaultValue: "openAIkey",
          tooltip: "Name of the preference field that stores the player's API key.",
        },
        {
          label: "Fallback API key",
          path: "params.stt.apiKey",
          type: "text",
          maxChar: 512,
          multiline: false,
          defaultValue: 'setting:openAIkey;sk-xxxxxxxxxxxxxxxxxxxxxxxx',
          tooltip: "Optional API key to use when an account key is unavailable.",
        },
      ],
    }],
    llm: [{  
      /*  SUBSECTION */
      label: "LLM Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "mainAssistant",
        },
        {
          label: "Context (main instructions for the AI)",
          type: "text",
          path: "params.context",
          migratePath: "rules",
          tooltip: "This is the main assistant instructions.",
          maxChar: 16000,
          multiline: true,
          lines: 20,
          defaultValue: "Answer the user's questions and provide helpful information.",
        },
        {
          label: "Pre-first-turn Instructions (used before the 1st user turn)",
          type: "text",
          path: "params.zerothTurnInstructions",
          migratePath: "greetingInstructions",
          tooltip: "Give the AI instructions on what to say to start the chat.",
          maxChar: 4096,
          multiline: true,
          lines: 6,
          defaultValue: "",
        },
        {
          label: "Turn Instructions (given each turn after the overview)",
          type: "text",
          path: "params.turnInstructions",
          migratePath: "turnInstructions",
          tooltip: "Give the AI instructions on what to do when the player plays a turn.",
          maxChar: 4096,
          multiline: true,
          lines: 6,
          defaultValue: "",
        },
        {
          label: "AI Parameters",
          type: "llmparams",
          fields: [
            {
              label: "AI Input Format",
              path: "params.inputFormat",
              type: "dropdown",
              tooltip: "Format to send to the main LLM that comes up with a response to the user.",
              options: Constants.modelRequestFormats.inputOptions.map((option) => {return {label: option, value: option}}),
            },
            {
              label: "AI Output Format",
              path: "params.outputFormat",
              type: "dropdown",
              tooltip: "Format to send to the main LLM that comes up with a response to the user.",
              options: Constants.modelRequestFormats.outputOptions.map((option) => {return {label: option, value: option}}),
            },
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "URL for making requests to the server. Format: ws://example.com:5005/api/v1/stream",
              maxChar: 2048,
              multiline: false,
            },
            {
              label: "API Key (ignored for local models)",
              path: "params.apiKey",
              type: "text",
              tooltip: "API key for requests to the server.",
              maxChar: 512,
              defaultValue: 'setting:openAIkey;sk-xxxxxxxxxxxxxxxxxxxxxxxx',
              multiline: false,
            },
            {
              label: "Temperature (Creativity) 0.0 - 1.0",
              type: "float",
              path: "params.temperature",
              migratePath: "temperature",
              tooltip: "Lower numbers mean less creative freedom, higher numberes is higher.",
              range: [0.01, 2.0],
              defaultValue: 0.7,
            },
            {
              label: "New token target",
              type: "decimal",
              range: [10, 10000],
              path: "params.newTokenTarget",
              migratePath: "assistantTokenLimit",
              tooltip: "The target length of the server's response.",
              defaultValue: 250,
            },
            {
              label: "Token Limit",
              type: "decimal",
              range: [10, 10000],
              path: "params.tokenLimit",
              migratePath: "assistantTokenLimit",
              tooltip: "The maximum number of tokens that can be processed by the server a single turn.",
              defaultValue: 4096,
            },
            {
              label: "Top_p",
              type: "float",
              range: [0.01, 1.0],
              path: "params.top_p",
              tooltip: "If not set to 1, select tokens with probabilities adding up to less than this number. Higher value = higher range of possible random results.",
              defaultValue: 0.92,
            },
            {
              label: "Top_k",
              type: "decimal",
              range: [1, 200],
              path: "params.top_k",
              tooltip: "Similar to top_p, but select instead only the top_k most likely tokens. Higher value = higher range of possible random results.",
              defaultValue: 8,
            },
            {
              label: "Repetition_penalty",
              type: "float",
              range: [1.0, 1.5],
              path: "params.repetition_penalty",
              tooltip: "Exponential penalty factor for repeating prior tokens. 1 means no penalty, higher value = less repetition, lower value = more repetition.",
              defaultValue: 1.1,
            },
            {
              label: "Streaming response",
              type: "checkbox",
              path: "params.streaming",
              tooltip: "If selected, the AI will send responses as they are generated.",
              defaultValue: true,
            },
          ]
        }
      ],
    }],
    llmData: [{  
      /*  SUBSECTION */
      label: "LLM Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "mainAssistant",
        },
        {
          label: "Context (main instructions for the AI)",
          type: "text",
          path: "params.context",
          migratePath: "rules",
          tooltip: "This is the main assistant instructions.",
          maxChar: 16000,
          multiline: true,
          lines: 20,
          defaultValue: "Answer the user's questions and provide helpful information.",
        },
        {
          label: "Pre-first-turn Instructions (used before the 1st user turn)",
          type: "text",
          path: "params.zerothTurnInstructions",
          migratePath: "greetingInstructions",
          tooltip: "Give the AI instructions on what to say to start the chat.",
          maxChar: 4096,
          multiline: true,
          lines: 6,
          defaultValue: "",
        },
        {
          label: "Turn Instructions (given each turn after the overview)",
          type: "text",
          path: "params.turnInstructions",
          migratePath: "turnInstructions",
          tooltip: "Give the AI instructions on what to do when the player plays a turn.",
          maxChar: 4096,
          multiline: true,
          lines: 6,
          defaultValue: "",
        },
        {
          label: "Data fields to extract from the AI's output (comma separated):",
          type: "dataFieldsEditor",
          path: "params.outputDataFields",
          tooltip: "Data fields to request from the AI.",
          defaultValue: [],
        },
        {
          label: "AI Parameters",
          type: "llmparams",
          fields: [
            {
              label: "AI Input Format",
              path: "params.inputFormat",
              type: "dropdown",
              tooltip: "Format to send to the main LLM that comes up with a response to the user.",
              options: Constants.modelRequestFormats.inputOptions.map((option) => {return {label: option, value: option}}),
            },
            {
              label: "AI Output Format",
              path: "params.outputFormat",
              type: "dropdown",
              tooltip: "Format to send to the main LLM that comes up with a response to the user.",
              options: Constants.modelRequestFormats.outputOptions.map((option) => {return {label: option, value: option}}),
            },
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "URL for making requests to the server. Format: ws://example.com:5005/api/v1/stream",
              maxChar: 2048,
              multiline: false,
            },
            {
              label: "API Key (ignored for local models)",
              path: "params.apiKey",
              type: "text",
              tooltip: "API key for requests to the server.",
              maxChar: 512,
              defaultValue: 'setting:openAIkey;sk-xxxxxxxxxxxxxxxxxxxxxxxx',
              multiline: false,
            },
            {
              label: "Temperature (Creativity) 0.0 - 1.0",
              type: "float",
              path: "params.temperature",
              migratePath: "temperature",
              tooltip: "Lower numbers mean less creative freedom, higher numberes is higher.",
              range: [0.01, 2.0],
              defaultValue: 0.7,
            },
            {
              label: "New token target",
              type: "decimal",
              range: [10, 10000],
              path: "params.newTokenTarget",
              migratePath: "assistantTokenLimit",
              tooltip: "The target length of the server's response.",
              defaultValue: 250,
            },
            {
              label: "Token Limit",
              type: "decimal",
              range: [10, 10000],
              path: "params.tokenLimit",
              migratePath: "assistantTokenLimit",
              tooltip: "The maximum number of tokens that can be processed by the server a single turn.",
              defaultValue: 4096,
            },
            {
              label: "Top_p",
              type: "float",
              range: [0.01, 1.0],
              path: "params.top_p",
              tooltip: "If not set to 1, select tokens with probabilities adding up to less than this number. Higher value = higher range of possible random results.",
              defaultValue: 0.92,
            },
            {
              label: "Top_k",
              type: "decimal",
              range: [1, 200],
              path: "params.top_k",
              tooltip: "Similar to top_p, but select instead only the top_k most likely tokens. Higher value = higher range of possible random results.",
              defaultValue: 8,
            },
            {
              label: "Repetition_penalty",
              type: "float",
              range: [1.0, 1.5],
              path: "params.repetition_penalty",
              tooltip: "Exponential penalty factor for repeating prior tokens. 1 means no penalty, higher value = less repetition, lower value = more repetition.",
              defaultValue: 1.1,
            },
            {
              label: "Streaming response",
              type: "checkbox",
              path: "params.streaming",
              tooltip: "If selected, the AI will send responses as they are generated.",
              defaultValue: true,
            },
          ]
        }
      ],
    }],
    openAiAgent: [{
      /*  SUBSECTION */
      label: "OpenAI AgentKit Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and output dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "agentKit",
        },
        {
          label: "Agent blueprint",
          type: "agentBlueprint",
          path: "params.agentBlueprint",
        },
        {
          label: "Connector registry references",
          type: "connectorRefs",
          path: "params.connectorRefs",
        },
        {
          label: "App surface hints",
          type: "text",
          path: "params.appSurface",
          tooltip: "Optional hints for ChatKit or custom UI surfaces.",
          maxChar: 4000,
          multiline: true,
          lines: 4,
          defaultValue: "{}",
        },
        {
          label: "Observability metadata (JSON string)",
          type: "text",
          path: "params.observability",
          tooltip: "Optional metadata to attach to agent traces.",
          maxChar: 4000,
          multiline: true,
          lines: 4,
          defaultValue: "{}",
        },
        {
          label: "AI Parameters",
          type: "fieldlist",
          fields: [
            {
              label: "Endpoint",
              type: "dropdown",
              path: "params.endpoint",
              tooltip: "Select which provider to use for agent execution.",
              options: Object.keys(Constants.endpoints.agentKit).map((key) => ({
                label: Constants.endpoints.agentKit[key].label,
                value: key,
              })),
              defaultValue: "openai",
            },
            {
              label: "Model",
              type: "text",
              path: "params.model",
              tooltip: "Model identifier supplied to the provider.",
              maxChar: 100,
              multiline: false,
              defaultValue: Constants.endpoints.agentKit.openai?.defaultModel ?? "gpt-4.1-mini",
            },
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "Endpoint URL for the selected provider.",
              maxChar: 2048,
              multiline: false,
              defaultValue: Constants.endpoints.agentKit.openai?.defaultUrl ?? "https://api.openai.com/v1/responses",
            },
            {
              label: "API Key",
              path: "params.apiKey",
              type: "text",
              tooltip: "API key for requests to the server.",
              maxChar: 512,
              defaultValue: 'setting:openAIkey;sk-xxxxxxxxxxxxxxxxxxxxxxxx',
              multiline: false,
            },
          ],
        },
      ],
    }],
    microsoftAgentFramework: [{
      /*  SUBSECTION */
      label: "Microsoft Agent Framework Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and output dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "agentFramework",
        },
        {
          label: "Agent configuration (JSON)",
          type: "codeEditor",
          path: "params.agentConfig",
          tooltip: "Agent Framework pipeline configuration.",
          defaultValue: `{
  "entryPoint": "main",
  "graph": {
    "nodes": []
  }
}`,
        },
        {
          label: "Workflow variables (JSON)",
          type: "codeEditor",
          path: "params.workflowVariables",
          tooltip: "Optional variables provided to the Agent Framework pipeline.",
          defaultValue: "{}",
        },
        {
          label: "Azure resource profile",
          type: "azureResourceProfile",
          path: "params.azureResourceProfile",
        },
        {
          label: "Safety settings (JSON)",
          type: "codeEditor",
          path: "params.safetySettings",
          tooltip: "Optional safety controls for tool usage and networking.",
          defaultValue: `{
  "toolUse": "allowlisted",
  "network": "restricted"
}`,
        },
        {
          label: "Observability metadata (JSON string)",
          type: "text",
          path: "params.metadata",
          tooltip: "Optional metadata attached to Agent Framework traces.",
          maxChar: 4000,
          multiline: true,
          lines: 4,
          defaultValue: "{}",
        },
        {
          label: "AI Parameters",
          type: "fieldlist",
          fields: [
            {
              label: "Endpoint",
              type: "dropdown",
              path: "params.endpoint",
              tooltip: "Select which Agent Framework endpoint to use.",
              options: Object.keys(Constants.endpoints.agentFramework || {}).map((key) => ({
                label: Constants.endpoints.agentFramework[key].label ?? key,
                value: key,
              })),
              defaultValue: "microsoft",
            },
            {
              label: "Model",
              type: "text",
              path: "params.model",
              tooltip: "Agent Framework model identifier.",
              maxChar: 150,
              multiline: false,
              defaultValue: Constants.endpoints.agentFramework?.microsoft?.defaultModel ?? "microsoft-agent-framework",
            },
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "Agent Framework invocation endpoint.",
              maxChar: 2048,
              multiline: false,
              defaultValue: Constants.endpoints.agentFramework?.microsoft?.defaultUrl ?? "https://agentframework.microsoft.com/api/run",
            },
            {
              label: "OAuth scope",
              type: "text",
              path: "params.scope",
              tooltip: "Client credential scope supplied when requesting access tokens.",
              maxChar: 2048,
              multiline: false,
              defaultValue: Constants.endpoints.agentFramework?.microsoft?.scope ?? "https://graph.microsoft.com/.default",
            },
            {
              label: "Tenant ID override",
              type: "text",
              path: "params.tenantId",
              tooltip: "Optional override if you need to target a different tenant.",
              maxChar: 128,
              multiline: false,
              defaultValue: "",
            },
            {
              label: "Client ID override",
              type: "text",
              path: "params.clientId",
              tooltip: "Optional override for the registered app client ID.",
              maxChar: 128,
              multiline: false,
              defaultValue: "",
            },
            {
              label: "Client secret override",
              type: "text",
              path: "params.clientSecret",
              tooltip: "Provide only if you need to override the stored client secret.",
              maxChar: 512,
              multiline: false,
              defaultValue: "",
            },
            {
              label: "Bearer token / API key",
              type: "text",
              path: "params.apiKey",
              tooltip: "Optional bearer token override (leave blank to generate automatically).",
              maxChar: 1024,
              multiline: false,
              defaultValue: "",
            },
          ],
        },
      ],
    }],
    uiAutomation: [{
      /*  SUBSECTION */
      label: "UI Automation Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and output dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "uiAutomation",
        },
        {
          label: "Task description",
          type: "text",
          path: "params.taskDescription",
          tooltip: "Describe the user journey or workflow to automate.",
          maxChar: 4000,
          multiline: true,
          lines: 6,
          defaultValue: "Open the admin dashboard, review the latest incident ticket, and summarize the mitigation steps.",
        },
        {
          label: "Viewport (screenshot or DOM snapshot)",
          type: "viewport",
          path: "params.viewport",
        },
        {
          label: "Session state (JSON)",
          type: "codeEditor",
          path: "params.sessionState",
          tooltip: "Optional session cookies or pointing device state.",
          defaultValue: "{}",
        },
        {
          label: "Safety settings (JSON)",
          type: "codeEditor",
          path: "params.safetySettings",
          tooltip: "Override Gemini Computer Use safety defaults.",
          defaultValue: `{
  "level": "strict"
}`,
        },
        {
          label: "Additional metadata (JSON string)",
          type: "text",
          path: "params.metadata",
          tooltip: "Optional metadata for instrumentation.",
          maxChar: 4000,
          multiline: true,
          lines: 4,
          defaultValue: "{}",
        },
        {
          label: "Maximum actions",
          type: "decimal",
          range: [1, 60],
          path: "params.maxSteps",
          tooltip: "Upper bound on the number of UI actions the model may emit.",
          defaultValue: 20,
        },
        {
          label: "Delay between actions (ms)",
          type: "decimal",
          range: [200, 5000],
          path: "params.stepDelayMs",
          tooltip: "Minimum delay inserted between actions (in milliseconds).",
          defaultValue: 500,
        },
        {
          label: "AI Parameters",
          type: "fieldlist",
          fields: [
            {
              label: "Endpoint",
              type: "dropdown",
              path: "params.endpoint",
              tooltip: "Select which provider endpoint to call.",
              options: Object.keys(Constants.endpoints.computerUse || {}).map((key) => ({
                label: Constants.endpoints.computerUse[key].label ?? key,
                value: key,
              })),
              defaultValue: "google",
            },
            {
              label: "Model",
              type: "text",
              path: "params.model",
              tooltip: "Model identifier for Gemini Computer Use.",
              maxChar: 128,
              multiline: false,
              defaultValue: Constants.endpoints.computerUse?.google?.defaultModel ?? "gemini-2.5-computer-use",
            },
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "Override the default Computer Use endpoint.",
              maxChar: 2048,
              multiline: false,
              defaultValue: Constants.endpoints.computerUse?.google?.defaultUrl ?? "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-user:computerUse",
            },
            {
              label: "API key override",
              type: "text",
              path: "params.apiKey",
              tooltip: "Optional Google API key override (leave blank to use account preference).",
              maxChar: 256,
              multiline: false,
              defaultValue: "",
            },
          ],
        },
      ],
    }],
    perplexitySearch: [{  
      /*  SUBSECTION */
      label: "Perplexity Search Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and output dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "perplexitySearch",
        },
        {
          label: "Search query",
          type: "text",
          path: "params.query",
          tooltip: "Query passed to Perplexity.",
          maxChar: 2000,
          multiline: true,
          lines: 3,
          defaultValue: "Latest Multi-Agent coordination techniques",
        },
        {
          label: "Search configuration",
          type: "searchConfig",
          path: "params.searchConfig",
        },
        {
          label: "API parameters",
          type: "fieldlist",
          fields: [
            {
              label: "Endpoint",
              type: "dropdown",
              path: "params.endpoint",
              tooltip: "Select the search provider endpoint.",
              options: Object.keys(Constants.endpoints.search).map((key) => ({
                label: Constants.endpoints.search[key].label,
                value: key,
              })),
              defaultValue: "perplexity",
            },
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "Override the Perplexity API endpoint if needed.",
              maxChar: 2048,
              multiline: false,
              defaultValue: Constants.endpoints.search.perplexity?.defaultUrl ?? "https://api.perplexity.ai/search",
            },
            {
              label: "API Key",
              path: "params.apiKey",
              type: "text",
              tooltip: "API key for requests to Perplexity.",
              maxChar: 512,
              defaultValue: 'setting:perplexityApiKey;px-xxxxxxxxxxxxxxxx',
              multiline: false,
            },
          ],
        },
      ],
    }],
    modelTraining: [{
      /*  SUBSECTION */
      label: "Model Training Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and output dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "modelTraining",
        },
        {
          label: "Base model identifier",
          type: "text",
          path: "params.baseModel",
          tooltip: "The base model that Tinker should fine-tune.",
          maxChar: 200,
          multiline: false,
          defaultValue: "tinker/base-qwen-7b",
        },
        {
          label: "Training dataset (files to upload)",
          type: "fileStoreEditor",
          path: "params.trainingDataset",
          tooltip: "Upload one or more JSONL files containing training examples.",
          defaultValue: [],
        },
        {
          label: "Training configuration",
          type: "trainingConfig",
          path: "params.trainingConfig",
        },
        {
          label: "API parameters",
          type: "fieldlist",
          fields: [
            {
              label: "Endpoint",
              type: "dropdown",
              path: "params.endpoint",
              tooltip: "Select the training provider endpoint.",
              options: trainingEndpointOptions,
              defaultValue: defaultTrainingKey,
            },
            {
              label: "Training job URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "Endpoint used to submit training jobs.",
              maxChar: 2048,
              multiline: false,
              defaultValue: defaultTrainingSubmitUrl,
            },
            {
              label: "Status polling URL",
              type: "text",
              path: "params.statusUrl",
              tooltip: "Endpoint used to poll job status (defaults to the submit URL).",
              maxChar: 2048,
              multiline: false,
              defaultValue: defaultTrainingStatusUrl,
            },
            {
              label: "API Key",
              path: "params.apiKey",
              type: "text",
              tooltip: "Tinker API key.",
              maxChar: 512,
              defaultValue: 'setting:tinkerApiKey;tk-xxxxxxxxxxxxxxxx',
              multiline: false,
            },
          ],
        },
      ],
    }],
    fileStore: [{  
      /*  SUBSECTION */
      label: "File Store",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "mainAssistant",
        },
        {
          label: "Files",
          type: "fileStoreEditor",
          path: "params.files",
          tooltip: "Files stored.",
          defaultValue: [],
        },
      ],
    }],
    imageGenerator: [{  
      /*  SUBSECTION */
      label: "Image Generator Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "mainAssistant",
        },
        {
          label: "Prompt (instructions used to generate the image)",
          type: "text",
          path: "params.prompt",
          tooltip: "The instructions for generating the image (often overridden by input)",
          maxChar: 2000,
          multiline: true,
          lines: 4,
          defaultValue: "An image of a dog in a field of flowers.",
        },
        {
          label: "Width",
          type: "decimal",
          range: [512, 4320],
          path: "params.width",
          tooltip: "The requested width of the image.",
        },
        {
          label: "Height",
          type: "decimal",
          range: [512, 4320],
          path: "params.height",
          tooltip: "The requested height of the image.",
        },
        {
          label: "Extra Parameters",
          type: "text",
          path: "params.extraPromptParams",
          tooltip: "Extra parameters to append to the prompt",
          maxChar: 500,
          multiline: true,
        },
        {
          label: "Negative prompt",
          type: "text",
          path: "params.negativePrompt",
          tooltip: "Negative prompt parameters to send to the server.",
          maxChar: 500,
          multiline: true,
        },
        {
          label: "AI Parameters",
          type: "imagegenparams",
          fields: [
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "URL for making requests to the server. Format: ws://example.com:5005/api/v1/stream",
              maxChar: 2048,
              multiline: false,
            },
            {
              label: "API Key (ignored for local models)",
              path: "params.apiKey",
              type: "text",
              tooltip: "API key for requests to the server.",
              maxChar: 512,
              defaultValue: 'setting:openAIkey;sk-xxxxxxxxxxxxxxxxxxxxxxxx',
              multiline: false,
            },
            {
              label: "Seed",
              type: "decimal",
              range: [-1, Number.MAX_SAFE_INTEGER],
              path: "params.seed",
              tooltip: "A seed specific to the image generator.",
            },
            {
              label: "Stable Diffustion Advanced Parameters",
              type: "subSection",
              fields: [
                {
                  label: "Sampling steps",
                  type: "decimal",
                  range: [1, 500],
                  path: "params.steps",
                  tooltip: "Sampling steps - usually, more leads to a higher quality image but takes more time.",
                  defaultValue: 20,
                },
                {
                  label: "CFG Scale (Stable Diffusion)",
                  type: "float",
                  range: [0.5, 30.0],
                  path: "params.cfg_scale",
                  tooltip: "CFG Scale.",
                  defaultValue: 7,
                },
                {
                  label: "Prompt Token Limit (0 = no limit) (Stable Diffusion)",
                  type: "decimal",
                  range: [0, 1000],
                  path: "params.promptTokenLimit",
                  tooltip: "Max tokens for prompt and negative prompt (same value used for both)",
                  defaultValue: 70,
                },
                {
                  label: "Sampling method (Stable Diffusion)",
                  type: "text",
                  maxChar: 256,
                  path: "params.sampling_method",
                  tooltip: "Sampling method.",
                  defaultValue: "Euler a",
                },
              ]
            }
          ]
        }
      ],
    }],    
    codeBlock: [{  
      /*  SUBSECTION */
      label: "Code Block",
      type: "fieldlist",
      fields: [ 
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "Code Block",
        },
        {
          label: "Code to run:",
          type: "codeEditor",
          path: "params.code_UNSAFE",
          tooltip: "Code to run",
          defaultValue: "",
        },
        {
          label: "Max execution time (ms)",
          type: "decimal",
          range: [250, 300000],
          path: "params.maxExecutionTimeMs",
          tooltip: "Abort execution if custom code runs longer than this duration.",
          defaultValue: 30000,
        },
        {
          label: "Sandbox retention (hours)",
          type: "decimal",
          range: [1, 24],
          path: "params.sandboxTTLHours",
          tooltip: "How long to retain sandbox state before automatically resetting.",
          defaultValue: 6,
        },
        {
          label: "Reset sandbox before each run",
          type: "checkbox",
          path: "params.resetSandbox",
          tooltip: "Enable to discard stored state prior to running the code block.",
          defaultValue: false,
        },
      ],
    }],    
    scenario: [{  
      /*  SUBSECTION */
      label: "Scenarios",
      type: "fieldlist",
      fields: [ 
        {
          label: "Give this new entry a name to help you keep track of it (not shown to users):",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "Code Block",
        },
        {
          label: "Minimum Frequency",
          type: "decimal",
          range: [1, 10000],
          path: "params.frequencyMin",
          tooltip: "Minimum time bewteen scenarios.",
        },
        {
          label: "Maximum Frequency",
          type: "decimal",
          range: [1, 10000],
          path: "params.frequencyMax",
          tooltip: "Minimum time bewteen scenarios.",
        },
        {
          label: "Scenarios",
          type: "scenarioEditor",
          path: "params.catalog",
          tooltip: "Scenarios",
          defaultValue: [],
        },
      ],
    }],
    stt: [{  
      /*  SUBSECTION */
      label: "Speech-to-text Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "STT",
        },
        {
          label: "AI Parameters",
          type: "fieldlist",
          fields: [
            {
              label: "Model",
              type: "text",
              path: "params.model",
              tooltip: "Model to use",
              maxChar: 50,
              multiline: false,
              defaultValue: "gpt-4o-transcribe",
            },
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "URL for making requests to the server.",
              maxChar: 2048,
              multiline: false,
              default: 'https://api.openai.com/v1/audio/transcriptions',
            },
            {
              label: "API Key (ignored for local models)",
              path: "params.apiKey",
              type: "text",
              tooltip: "API key for requests to the server.",
              maxChar: 512,
              defaultValue: 'setting:openAIkey;sk-xxxxxxxxxxxxxxxxxxxxxxxx',
              multiline: false,
            },
          ]
        }
      ],
    }],
    videoGenerator: [{
      /*  SUBSECTION */
      label: "Video Generator Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and output dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "videoGenerator",
        },
        {
          label: "Prompt (instructions used to generate the video)",
          type: "text",
          path: "params.prompt",
          tooltip: "The instructions for generating the video (often overridden by input).",
          maxChar: 4000,
          multiline: true,
          lines: 6,
          defaultValue: "A cinematic drone shot over a futuristic city at sunset.",
        },
        {
          label: "Video rendering settings",
          type: "videoGenerationSettings",
          path: "params.videoGenerationSettings",
        },
        {
          label: "AI Parameters",
          type: "fieldlist",
          fields: [
            {
              label: "Endpoint",
              type: "dropdown",
              path: "params.endpoint",
              tooltip: "Select which provider to use for video generation.",
              options: Object.keys(Constants.endpoints.videoGeneration).map((key) => ({
                label: Constants.endpoints.videoGeneration[key].label,
                value: key,
              })),
              defaultValue: "openai",
            },
            {
              label: "Model",
              type: "text",
              path: "params.model",
              tooltip: "Model identifier supplied to the provider.",
              maxChar: 100,
              multiline: false,
              defaultValue: Constants.endpoints.videoGeneration.openai?.defaultModel ?? "sora-2",
            },
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "Endpoint URL for the selected provider.",
              maxChar: 2048,
              multiline: false,
              defaultValue: Constants.endpoints.videoGeneration.openai?.defaultUrl ?? "https://api.openai.com/v1/videos",
            },
            {
              label: "API Key",
              path: "params.apiKey",
              type: "text",
              tooltip: "API key for requests to the server.",
              maxChar: 512,
              defaultValue: 'setting:openAIkey;sk-xxxxxxxxxxxxxxxxxxxxxxxx',
              multiline: false,
            },
          ],
        },
      ],
    }],
    tts: [{  
      /*  SUBSECTION */
      label: "Text-to-Speech Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "TTS",
        },
        {
          label: "Text to convert to speech",
          type: "text",
          path: "params.text",
          tooltip: "The text to convert",
          maxChar: 2000,
          multiline: true,
          lines: 4,
          defaultValue: "The quick brown fox jumped over the lazy dog.",
        },
        {
          label: "Speed",
          type: "float",
          range: [0.25, 4.0],
          path: "params.speed",
          tooltip: "The requested playback speed.",
          defaultValue: 1,
        },
        {
          label: "Voice",
          path: "params.voice",
          type: "text",
          maxChar: 200,
          multiline: false,
          defaultValue: "alloy",
        },
        {
          label: "AI Parameters",
          type: "audiogenparams",
          fields: [
            {
              label: "Server URL",
              type: "text",
              path: "params.serverUrl",
              tooltip: "URL for making requests to the server.",
              maxChar: 2048,
              multiline: false,
              default: 'https://api.openai.com/v1/audio/speech',
            },
            {
              label: "API Key (ignored for local models)",
              path: "params.apiKey",
              type: "text",
              tooltip: "API key for requests to the server.",
              maxChar: 512,
              defaultValue: 'setting:openAIkey;sk-xxxxxxxxxxxxxxxxxxxxxxxx',
              multiline: false,
            },
          ]
        }
      ],
    }],
    audioPlayback: [{  
      /*  SUBSECTION */
      label: "Audio Playback Node",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "TTS",
        },
        {
            label: "Audio Type",
            type: "dropdown",
            path: "params.audioType",
            options: Constants.audioPlaybackTypes,
            defaultValue: "speech",
            tooltip: "Type of audio to play.",
        },
        {
            label: "Loop",
            type: "checkbox",
            path: "params.loop",
            defaultValue: false,
            tooltip: "Loop the audio.",
        },
        {
            label: "Autoplay",
            type: "dropdown",
            path: "params.autoplay",
            defaultValue: "onlyFirstTime",
            options: [
                {label: "Never", value: "never"},
                {label: "Only first time", value: "onlyFirstTime"},
                {label: "Always", value: "always"},
            ],
            tooltip: "Autoplay setting.",
        },
        {
          label: "Text to display",
          type: "text",
          path: "params.text",
          maxChar: 16000,
          multiline: true,
          lines: 8,
          defaultValue: "",
        },
        {
          label: "Hide message (if selected, audio plays in the background with no controls)",
          type: "checkbox",
          path: "params.hidden",
          defaultValue: true,
          tooltip: "If selected, audio plays in the background with no controls",
        },
      {
        label: "Speed",
        type: "float",
        range: [0.25, 4.0],
        path: "params.speed",
        tooltip: "The requested playback speed.",
      },
    ],
  }],
  suggestions: [{
      /*  SUBSECTION */
      label: "suggestions",
      type: "subSection",
      fields: [
        {
          label: "Suggestions instructions",
          type: "text",
          path: "features.suggestions.instructions",
          tooltip: "Instructions for generating suggestions.",
          maxChar: 2048,
          multiline: false,
          defaultValue: "An array of 4 different possible actions the player could take for their character based on what's happening in the game, being plausible, specific, and brief",
        },
      ]
    }],    
    forLoop: [{  
      /*  SUBSECTION */
      label: "For Loop",
      type: "fieldlist",
      fields: [ 
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "For loop",
        },
        {
          label: "From",
          type: "decimal",
          range: [0, 9999999],
          path: "params.start",
          defaultValue: 0,
          tooltip: "Starting value of the for loop.",
        },
        {
          label: "To",
          type: "decimal",
          range: [0, 9999999],
          path: "params.end",
          defaultValue: 10,
          tooltip: "Starting value of the for loop.",
        },
      ],
    }],
    ifThenElse:  [{  
      /*  SUBSECTION */
      label: "For Loop",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "If/Then",
        },
        {
          label: "Comparison",
          path: "params.comparator",
          type: "dropdown",
          options: ifThenElseMetadata.supportedComparators.map((option) => {return {label: option, value: option}}),
          defaultValue: "==",
          tooltip: "Comparison operator to use to compare the two values.",
        },
        {
          label: "Default input value (overridden by input)",
          path: "params.value",
          type: "text",
          tooltip: "The default input value.",
          maxChar: 1000,
          multiline: false,
          defaultValue: "0",
        },
        {
          label: "Comparison Value (uses JS eval)",
          type: "text",
          path: "params.compareValue",
          tooltip: "The value to compare against.",
          maxChar: 1000,
          multiline: false,
          defaultValue: "true",
        },
      ],
    }],   
    arrayIndex: [{  
      /*  SUBSECTION */
      label: "Array Index",
      type: "fieldlist",
      fields: [ 
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "For loop",
        },
      ],
    }], 
    arrayIterator: [{  
      /*  SUBSECTION */
      label: "Array Index",
      type: "fieldlist",
      fields: [ 
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "For loop",
        },
      ],
    }],
    whileLoop:  [{  
      /*  SUBSECTION */
      label: "While Loop",
      type: "fieldlist",
      fields: [
        {
          label: "Name (name referenced in input and ouput dropdowns)",
          type: "text",
          path: "instanceName",
          tooltip: "A unique name for your reference.",
          maxChar: 30,
          multiline: false,
          defaultValue: "While",
        },
        {
          label: "Comparison",
          path: "params.comparator",
          type: "dropdown",
          options: ifThenElseMetadata.supportedComparators.map((option) => {return {label: option, value: option}}),
          defaultValue: "==",
          tooltip: "Comparison operator to use to compare the two values.",
        },
        {
          label: "Default input value (overridden by input)",
          path: "params.value",
          type: "text",
          tooltip: "The default input value.",
          maxChar: 1000,
          multiline: false,
          defaultValue: "0",
        },
        {
          label: "Comparison Value (uses JS eval)",
          type: "text",
          path: "params.compareValue",
          tooltip: "The value to compare against.",
          maxChar: 1000,
          multiline: false,
          defaultValue: "true",
        },
      ],
    }],
  };
